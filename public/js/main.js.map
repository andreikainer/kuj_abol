{"version":3,"sources":["pubsub.js","main.js","projectpage.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxxfile":"main.js","sourcesContent":["/*\n * jQuery Tiny Pub/Sub\n * https://github.com/cowboy/jquery-tiny-pubsub\n *\n * Copyright (c) 2013 \"Cowboy\" Ben Alman\n * Licensed under the MIT license.\n */\n\n(function($) {\n\n    var o = $({});\n\n    $.subscribe = function() {\n        o.on.apply(o, arguments);\n    };\n\n    $.unsubscribe = function() {\n        o.off.apply(o, arguments);\n    };\n\n    $.publish = function() {\n        o.trigger.apply(o, arguments);\n    };\n\n}(jQuery));","$(document).ready(function()\n{\n    // Store the user's current language to `locale`.\n    window.locale;\n    getLocale();\n\n/*------------------------------------------------------------------*/\n    /*-- BACKUPS --*/\n/*------------------------------------------------------------------*/\n\n/*-- Opera MIni Backup -----------------------------------------------*/\n    var isOperaMini = (navigator.userAgent.indexOf('Opera Mini') > -1);\n    if (isOperaMini)\n    {\n        $('#operamini').show();\n    }\n\n\n\n\n/*------------------------------------------------------------------*/\n  /*-- SMOOTH SCROLL --*/\n/*------------------------------------------------------------------*/\n//https://github.com/cferdinandi/smooth-scroll#how-to-contribute - here you may find compiled and production-ready code.\n    smoothScroll.init({\n        speed: 500,                 // How fast to complete the scroll in milliseconds\n        easing: 'easeInOutQuint'    // Easing pattern to use\n    });\n\n\n\n\n/*------------------------------------------------------------------*/\n    /*-- FUNCTIONS --*/\n/*------------------------------------------------------------------*/\n/*\n * changeCircleBtnGroupAlignment\n * changes the grid layout components of a group of circle buttons (search_btn, help_btn, lang_btn)\n */\n    function changeCircleBtnGroupAlignment()\n    {\n        $('.circles').toggleClass('col-sm-4', false)\n            .toggleClass('col-sm-push-5', false)\n            .toggleClass('col-sm-3', true)\n            .toggleClass('col-sm-push-6', true);\n    }\n\n\n\n/*\n * changeRightBtnGroupAlignment\n * changes the grid layout components of right group of buttons in the header\n */\n    function changeRightBtnGroupAlignment()\n    {\n        $('.circles div div').toggleClass('alignme-center', false);\n    }\n\n\n    function getLocale()\n    {\n        $.ajax({\n            url : '/get-locale',\n            method : 'GET',\n            success : function(response)\n            {\n                window.locale = response;\n            },\n            error : function(response)\n            {\n                window.locale = 'de';\n            }\n        });\n    }\n\n/*-----Functions for modules ---------------------------------------*/\n\n/*\n * closeModule\n * hides the search module\n */\n    function closeModule()\n    {\n        $('.module').slideUp(400);\n    }\n\n /*\n  * slideModule\n  * @param btn; obj; button, that was pressed\n  * shows/hides the module\n  */\n    function slideModule(btn)\n    {\n        $(btn.attr('data-target')).slideToggle(400);\n    }\n\n// when user clicks somewhere outside search module, hide search module\n    $('html').on(\"click\", function()\n    {\n        closeModule();\n    });\n// when user clicks Close Button, hide the module\n    $('.module i').on(\"click\", function(e)\n    {\n        closeModule();\n    });\n// when clicked inside module, don't hide it\n    $('.module').on(\"click\", function(e)\n    {\n        e.stopPropagation();\n        //$('input[name = search_inputfield]').on('input', function() {\n        //    console.log($(this).val());\n        //});\n    });\n/*------------------------------------------------------------------*/\n\n\n\n/*------------------------------------------------------------------*/\n    /*-- SEARCH OPTION --*/\n/*------------------------------------------------------------------*/\n// when Magnifier Button pressed, show/hide search module\n    $('.magnifier').on(\"click\", function(e)\n    {\n        e.stopPropagation();\n        slideModule($(this));\n    });\n\n/*------------------------------------------------------------------*/\n    /*-- HELP OPTION --*/\n/*------------------------------------------------------------------*/\n// when Question Button pressed, show/hide search module\n    $('.question').on(\"click\", function(e)\n    {\n        e.stopPropagation();\n        slideModule($(this));\n    });\n\n\n\n\n/*------------------------------------------------------------------*/\n  /*-- LANGUAGE CHANGE OPTION --*/\n/*------------------------------------------------------------------*/\n/*\n * check what land flag is displaying\n * toggle the flag on a press button event\n */\n    $('.language-toggle').on(\"click\", function(e)\n    {\n\n        //if(lang_changed === true)\n        //{\n        //    lang_changed = false;\n        //    return;\n        //}\n        //\n        //e.preventDefault();\n        //\n        //if($('.currLang').text() === 'de')\n        //{\n        //    $(this).attr('href', 'http://kuj.dev/en');\n        //    alert($(this).attr('href'));\n        //    lang_changed = true;\n        //}else{\n        //    $(this).attr('href', 'http://kuj.dev/de');\n        //    alert($(this).attr('href'));\n        //    lang_changed = true;\n        //}\n        //\n        //$(this).trigger(\"click\");\n\n\n        if($(this).hasClass('at'))\n        {\n            $(this).toggleClass('at', false).toggleClass('gb', true);\n        }else{\n            $(this).toggleClass('at', true).toggleClass('gb', false);\n        }\n\n        // Set the global variable `locale` to the user's selected language.\n        getLocale();\n\n        //e.preventDefault();\n        ////console.log(window.location.href.substring(window.location.href.indexOf(\"/\", window.location.href.indexOf(\"/\", window.location.href.indexOf(\"/\") +1))));\n        //\n        //var currUrl = window.location.href;\n        //currUrl = currUrl.split(\"/\");\n        //console.log(currUrl[3]);\n        //\n        //if(currUrl[3] === 'de')\n        //{\n        //    currUrl[3] = 'en';\n        //    var newUrl = currUrl.join('/');\n        //\n        //    //$(this).toggleClass('at', false).toggleClass('gb', true);\n        //    //console.log(newUrl);\n        //    $(location).attr('href', newUrl);\n        //}\n\n        //if($(this).hasClass('at'))\n        //{\n        //    $(this).toggleClass('hidden', true);\n        //    console.log($('gb'));\n        //    $('.gb').toggleClass('hidden', false);\n        //}else{\n        //    $(this).toggleClass('hidden', false);\n        //    $('.gb').toggleClass('hidden', true);\n        //}\n    });\n\n\n\n\n\n\n\n\n\n\n\n/*------------------------------------------------------------------*/\n    /*-- CODE --*/\n/*------------------------------------------------------------------*/\n    if($(window).innerWidth() > 887 && $(window).innerWidth() < 992)\n    {\n        changeCircleBtnGroupAlignment();\n    }else if($(window).innerWidth() >= 1475)\n    {\n        changeRightBtnGroupAlignment();\n    }\n\n});","/*------------------------------------------------------------------*/\n/*-- COUNTDOWN --*/\n/*------------------------------------------------------------------*/\n\nvar GKCounter = new Class({\n    final: null,\n    element: null,\n    finalText: '',\n    dcount: null,\n    hcount: null,\n    mcount: null,\n    scount: null,\n    tempDays: 0,\n    tempHours: 0,\n    tempMins: 0,\n    tempSecs: 0,\n\n    initialize: function(el) {\n        // set the element handler\n        this.element = el;\n        // get the date and time\n        var dateEnd = this.element.get('data-date');\n        var timeEnd = this.element.get('data-time');\n        this.finalText = this.element.get('data-final');\n        // parse the date and time\n        dateEnd = dateEnd.split('-');\n        timeEnd = timeEnd.split(':');\n        // get the timezone of the date\n        var dateTimezone = -1 * parseInt(this.element.get('data-timezone'), 10) * 60;\n        // calculate the final date timestamp\n        this.final = Date.UTC(dateEnd[2], (dateEnd[1] * 1) - 1, dateEnd[0], timeEnd[0], timeEnd[1]);\n        //\n        // calculate the final date according to user timezone\n        //\n        // - get the user timezone\n        var tempd = new Date();\n        var userTimezone = tempd.getTimezoneOffset();\n        var newTimezoneOffset = 0;\n        // if the timezones are equal - do nothing, in the other case we need calculations:\n        if(dateTimezone !== userTimezone) {\n            newTimezoneOffset = userTimezone - dateTimezone;\n            // calculate new timezone offset to miliseconds\n            newTimezoneOffset = newTimezoneOffset * 60 * 1000;\n        }\n        // calculate the new final time according to time offset\n        this.final = this.final + newTimezoneOffset;\n\n        //\n        // So now we know the final time - let's calculate the base time for the counter:\n        //\n\n        // create the new date object\n        var d = new Date();\n        // calculate the current date timestamp\n        var current = Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds());\n\n        //\n        // calculate the difference between the dates\n        //\n        var diff = this.final - current;\n\n        // if the difference is smaller than 3 seconds - then the counting was ended\n        if(diff < 30 * 1000 || diff < 0) {\n            this.element.set('html', '');\n            this.countingEnded();\n        } else {\n            // in other case - let's calculate the difference in the days, hours, minutes and seconds\n            var leftDays = 0;\n            var leftHours = 0;\n            var leftMinutes = 0;\n            var leftSeconds = 0;\n\n            leftDays = Math.floor((1.0 * diff) / (24 * 60 * 60 * 1000));\n\n            var tempDiff = diff - (leftDays * 24 * 60 * 60 * 1000);\n            leftHours = Math.floor(tempDiff / (60 * 60 * 1000));\n            tempDiff = tempDiff - (leftHours * 60 * 60 * 1000);\n            leftMinutes = Math.floor(tempDiff / (60 * 1000));\n            tempDiff = tempDiff - (leftMinutes * 60 * 1000);\n            leftSeconds = Math.floor(tempDiff / 1000);\n            // set the counter handlers\n            this.dcount = document.id('countdown-days');\n            this.hcount = document.id('countdown-hours');\n            this.mcount = document.id('countdown-minutes');\n            this.scount = document.id('countdown-seconds');\n            // run the initial animation\n            this.tick();\n        }\n    },\n\n    // function used to tick the counter ;-)\n    tick: function() {\n        // create the new date object\n        var d = new Date();\n        // calculate the current date timestamp\n        var current = Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds());\n        //\n        // calculate the difference between the dates\n        //\n        var diff = this.final - current;\n\n        // if the difference is smaller than 1 second - then the counting was ended\n        if(diff < 1 * 1000) {\n            this.countingEnded();\n        } else {\n            // in other case - let's calculate the difference in the days, hours, minutes and seconds\n            var leftDays = 0;\n            var leftHours = 0;\n            var leftMinutes = 0;\n            var leftSeconds = 0;\n\n            leftDays = Math.floor((1.0 * diff) / (24 * 60 * 60 * 1000));\n            var tempDiff = diff - (leftDays * 24 * 60 * 60 * 1000);\n            leftHours = Math.floor(tempDiff / (60 * 60 * 1000));\n            tempDiff = tempDiff - (leftHours * 60 * 60 * 1000);\n            leftMinutes = Math.floor(tempDiff / (60 * 1000));\n            tempDiff = tempDiff - (leftMinutes * 60 * 1000);\n            leftSeconds = Math.floor(tempDiff / 1000);\n\n            this.dcount.set('text', ((leftDays < 10) ? '0' : '') + leftDays);\n            this.hcount.set('text', ((leftHours < 10) ? '0' : '') + leftHours)\n            this.mcount.set('text', ((leftMinutes < 10) ? '0' : '') + leftMinutes)\n            this.scount.set('text', ((leftSeconds < 10) ? '0' : '') + leftSeconds);\n\n            var $this = this;\n\n            setTimeout(function() {\n                $this.tick();\n            }, 1000);\n        }\n    },\n\n    // function used when the time is up ;-)\n    countingEnded: function() {\n        // set the H3 element with the final text\n        this.element.set('html', '<h2>' + this.finalText + '</h2>');\n    }\n});\n\nnew GKCounter(document.id('countdown'));\n\n/*------------------------------------------------------------------*/\n/*-- PROGRESS BAR --*/\n/*------------------------------------------------------------------*/\n\n$( document ).click(function() {\n    $( \"#progress-bar\" ).fadeIn(1000);\n});\n\n"],"sourceRoot":"/source/"}